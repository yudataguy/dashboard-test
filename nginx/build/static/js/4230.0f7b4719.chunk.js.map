{"version":3,"file":"static/js/4230.0f7b4719.chunk.js","mappings":"mOAcA,MAkHA,EAlHqBA,KACnB,MAyBOC,EAAQC,IAAaC,EAAAA,EAAAA,UAAS,OAC9BC,EAAOC,IAAYF,EAAAA,EAAAA,UAAS,KAC5BG,EAAgBC,IAAqBJ,EAAAA,EAAAA,UAAS,KAC9CK,EAASC,IAAcN,EAAAA,EAAAA,WAAS,GAkCvC,OACEO,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAAAC,SAAA,EACHC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,0BACJC,EAAAA,EAAAA,KAACC,EAAAA,GAAI,CAACC,GAAI,GAAGH,UACXC,EAAAA,EAAAA,KAACG,EAAAA,GAAK,CAACC,UAAU,OAAML,UACrBC,EAAAA,EAAAA,KAACK,EAAAA,GAAS,CAAAN,UACRF,EAAAA,EAAAA,MAACS,EAAAA,GAAK,CAAAP,SAAA,EACJC,EAAAA,EAAAA,KAAA,OAAKI,UAAU,OAAML,UACnBC,EAAAA,EAAAA,KAACO,EAAAA,GAAa,CACZC,GAAG,QACHC,MAAM,QACNC,KAAM,EACNC,KAAK,0BACLC,SAAWC,GAAMrB,EAASqB,EAAEC,OAAOC,WAGtCpB,GACCE,EAAAA,EAAAA,MAACmB,EAAAA,GAAO,CAACC,UAAQ,EAAAlB,SAAA,EACfC,EAAAA,EAAAA,KAACkB,EAAAA,GAAQ,CAACC,UAAU,OAAOC,KAAK,KAAK,cAAY,SAAS,kBAG5DpB,EAAAA,EAAAA,KAAA,OAAKI,UAAU,wDAAuDL,UACpEC,EAAAA,EAAAA,KAACgB,EAAAA,GAAO,CACNG,UAAU,QACVE,KAAK,SACLC,MAAM,UACNP,MAAM,SACNX,UAAU,OACVmB,QA5DGC,UACnB5B,GAAW,GACX,IACE,MAAM6B,QAAiBC,MAAM,GAADC,OAVhB,OAU2B,eAAe,CACpDC,OAAQ,OAERC,KAAMC,KAAKC,UAAU,CACnBxC,MAAOA,IAETyC,QAAS,CACP,eAAgB,sBAGpB,IAAKP,EAASQ,GACZ,MAAM,IAAIC,MAAM,uBAADP,OAAwBF,EAASU,SAElD,MAAMC,QAAaX,EAASY,OACtBjD,EAASgD,EAAa,OAAQ,KAG9BE,EAAiBF,EAAa,OAAS,MAG7C/C,EAAUD,GACVM,EAAkB4C,GAClB9C,EAAS,GACX,CAAE,MAAO+C,GACPC,QAAQD,MAAM,eAAgBA,EAChC,CACA3C,GAAW,EAAM,EAgCD6C,MAAO,CAAEC,YAAa,sBAQpC1C,EAAAA,EAAAA,KAACC,EAAAA,GAAI,CAACC,GAAI,GAAGH,UACXF,EAAAA,EAAAA,MAACM,EAAAA,GAAK,CAACC,UAAU,OAAML,SAAA,EACrBF,EAAAA,EAAAA,MAAC8C,EAAAA,GAAW,CAAA5C,SAAA,EACVC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,WAAe,IAAEN,GAAkBqC,KAAKC,UAAUtC,OAE5DO,EAAAA,EAAAA,KAACK,EAAAA,GAAS,CAAAN,UACRC,EAAAA,EAAAA,KAAC4C,EAAAA,GAAM,CAACC,QAzGF,CACd,CACEC,IAAK,SACLrC,MAAO,SACPsC,OAAQ,CAAEC,MAAO,QAEnB,CACEF,IAAK,QACLrC,MAAO,UACPsC,OAAQ,CAAEC,MAAO,QAEnB,CACEF,IAAK,aACLrC,MAAO,eACPsC,OAAQ,CAAEC,MAAO,QAEnB,CACEF,IAAK,QACLrC,MAAO,QACPsC,OAAQ,CAAEC,MAAO,SAsFeC,MAAO7D,EAAQ8D,OAAK,EAACC,SAAO,EAACC,UAAQ,EAAChC,KAAK,gBAItE,C","sources":["views/query/test/Test.js"],"sourcesContent":["import React, { useState } from 'react'\nimport {\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CForm,\n  CFormTextarea,\n  CButton,\n  CTable,\n  CSpinner,\n} from '@coreui/react'\n\nconst ChecksRadios = () => {\n  const columns = [\n    {\n      key: 'column',\n      label: 'Column',\n      _props: { scope: 'col' },\n    },\n    {\n      key: 'value',\n      label: 'Content',\n      _props: { scope: 'col' },\n    },\n    {\n      key: 'full_value',\n      label: 'Full Content',\n      _props: { scope: 'col' },\n    },\n    {\n      key: 'score',\n      label: 'Score',\n      _props: { scope: 'col' },\n    },\n  ]\n\n  const baseUrl = '/api'\n\n  const [result, setResult] = useState(null)\n  const [query, setQuery] = useState('')\n  const [submittedQuery, setSubmittedQuery] = useState('')\n  const [loading, setLoading] = useState(false)\n\n  const handleSubmit = async () => {\n    setLoading(true)\n    try {\n      const response = await fetch(`${baseUrl}/test_query`, {\n        method: 'POST',\n        // mode: 'cors',\n        body: JSON.stringify({\n          query: query,\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      })\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`)\n      }\n      const data = await response.json()\n      const result = data['result']['list']\n\n      // console.log(result)\n      const processedQuery = data['result']['query']\n      // console.log(processedQuery)\n\n      setResult(result)\n      setSubmittedQuery(processedQuery)\n      setQuery('')\n    } catch (error) {\n      console.error('Fetch Error:', error)\n    }\n    setLoading(false)\n  }\n\n  return (\n    <CRow>\n      <h1>Retrieval Playground</h1>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardBody>\n            <CForm>\n              <div className=\"mb-3\">\n                <CFormTextarea\n                  id=\"Query\"\n                  label=\"Query\"\n                  rows={3}\n                  text=\"Input Query for Testing\"\n                  onChange={(e) => setQuery(e.target.value)}\n                ></CFormTextarea>\n              </div>\n              {loading ? (\n                <CButton disabled>\n                  <CSpinner component=\"span\" size=\"sm\" aria-hidden=\"true\" /> Loading...\n                </CButton>\n              ) : (\n                <div className=\"mb-3 button-group spaced-buttons flex justify-between\">\n                  <CButton\n                    component=\"input\"\n                    type=\"button\"\n                    color=\"primary\"\n                    value=\"Submit\"\n                    className=\"mr-4\"\n                    onClick={handleSubmit}\n                    style={{ marginRight: '12px' }}\n                  />\n                </div>\n              )}\n            </CForm>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>Query:</strong> {submittedQuery && JSON.stringify(submittedQuery)}\n          </CCardHeader>\n          <CCardBody>\n            <CTable columns={columns} items={result} hover striped bordered size=\"sm\" />\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  )\n}\n\nexport default ChecksRadios\n"],"names":["ChecksRadios","result","setResult","useState","query","setQuery","submittedQuery","setSubmittedQuery","loading","setLoading","_jsxs","CRow","children","_jsx","CCol","xs","CCard","className","CCardBody","CForm","CFormTextarea","id","label","rows","text","onChange","e","target","value","CButton","disabled","CSpinner","component","size","type","color","onClick","async","response","fetch","concat","method","body","JSON","stringify","headers","ok","Error","status","data","json","processedQuery","error","console","style","marginRight","CCardHeader","CTable","columns","key","_props","scope","items","hover","striped","bordered"],"sourceRoot":""}